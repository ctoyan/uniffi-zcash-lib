interface ZcashTransactionBuilder {
    constructor(ZcashConsensusParameters parameters, ZcashBlockHeight block_height);

    void add_sapling_spend(
        ZcashExtendedSpendingKey extsk, 
        ZcashDiversifier diversifier, 
        ZcashSaplingNote note, 
        ZcashSaplingMerklePath merkle_path
    );
    
    void add_sapling_output(
        ZcashOutgoingViewingKey? ovk,
        ZcashPaymentAddress to,
        ZcashAmount value,
        ZcashMemoBytes memo
    );

    void add_transparent_input(
        SecpSecretKey sk,
        ZcashOutPoint utxo,
        ZcashTxOut coin
    );

    void add_transparent_output(
        ZcashTransparentAddress to,
        ZcashAmount value
    );

    [Throws=ZcashError]
    ZcashTransactionAndSaplingMetadata build(ZcashLocalTxProver prover, ZcashFeeRules fee_rule);
};

[Enum]
interface ZcashFeeRules {
    FixedStandard();
    FixedNonStandard(u64 amount);
    /// Construct a new FeeRule using the standard [ZIP 317] constants.
    ///
    /// [ZIP 317]: https//zips.z.cash/zip-0317
    Zip317Standard();
    Zip317NonStandard(
        u64 marginal_fee,
        u64 grace_actions,
        u64 p2pkh_standard_input_size,
        u64 p2pkh_standard_output_size
    );
};

interface ZcashTransaction {
    [Throws=ZcashError]
    sequence<u8> to_bytes();
};

dictionary ZcashTransactionAndSaplingMetadata {
    ZcashTransaction transaction;
    ZcashSaplingMetadata sapling_metadata;
};