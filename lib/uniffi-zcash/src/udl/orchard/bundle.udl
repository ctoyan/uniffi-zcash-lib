interface ZcashOrchardBundle {
    sequence<ZcashOrchardAction> actions();
    
    ZcashOrchardFlags flags();

    ZcashAmount value_balance();

    ZcashAnchor anchor();

    [Throws=ZcashError]
    void verify_proof([ByRef] ZcashVerifyingKey key);
    
    [Throws=ZcashError]
    ZcashOrchardBundleDecryptOutput decrypt_output_with_key(u64 action_idx, [ByRef] ZcashOrchardIncomingViewingKey ivk);

    sequence<ZcashOrchardBundleDecryptOutputForKeys> decrypt_output_with_keys(sequence<ZcashOrchardIncomingViewingKey> ivks);

    [Throws=ZcashError]
    ZcashOrchardBundleDecryptOutput recover_output_with_ovk(u64 action_idx, [ByRef] ZcashOrchardOutgoingViewingKey ovk);

    sequence<ZcashOrchardBundleDecryptOutputForOutgoingKeys> recover_outputs_with_ovks(sequence<ZcashOrchardOutgoingViewingKey> ivks);
};

interface ZcashOrchardFlags {
    [Name=from_parts]
    constructor(boolean spends_enabled, boolean outputs_enabled);

    [Name=from_byte, Throws=ZcashError]
    constructor(u8 v);

    boolean spends_enabled();

    boolean outputs_enabled();

    u8 to_byte();
};

dictionary ZcashOrchardBundleDecryptOutput {
    ZcashOrchardNote note;
    ZcashOrchardAddress address;
    sequence<u8> data;
};

dictionary ZcashOrchardBundleDecryptOutputForKeys {
    u64 val;
    ZcashOrchardIncomingViewingKey key;
    ZcashOrchardNote note;
    ZcashOrchardAddress address;
    sequence<u8> data;
};

dictionary ZcashOrchardBundleDecryptOutputForOutgoingKeys {
    u64 val;
    ZcashOrchardOutgoingViewingKey key;
    ZcashOrchardNote note;
    ZcashOrchardAddress address;
    sequence<u8> data;
};