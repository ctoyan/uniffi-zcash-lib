on:
  push:
  # schedule:
  #   - cron: 0 0 * * * # at the end of each day

jobs:
  check_for_public_api_diffs:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v2
        with:
          repository: zcash/librustzcash
          path: librustzcash
      - uses: actions/checkout@v2
        with:
          repository: eigerco/uniffi-zcash-lib
          path: uniffi-zcash-lib

      - name: Install cargo
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly # public-api needs nightly installed so public-api can use rustdoc JSON output

        # Generates env var for next step
        # USED_LIBS - list of librustzcash library names, separated by ';', which are used in the uniffi projects (ex - 'zcash_primitives;zcash_address;')
      - name: Get librustzcash libraries used in uniffi-zcash-lib
        run: |
          {
            echo 'USED_LIBS<<EOF'
              # get the names of all librustzcash packages
              cargo metadata --format-version=1 --no-deps --manifest-path=./librustzcash/Cargo.toml | \
              jq -r '.packages[] | .name' | \
              # intersect their names with the dependencies from uniffi-zcash-lib,
              # in order to get the librustzcash libraries used as dependencies in uniffi-zcash-lib
              # also sort and remove duplicates
              xargs -I {} sh -c "cargo metadata --format-version=1 --no-deps --manifest-path=./uniffi-zcash-lib/lib/Cargo.toml | jq -r '.packages[] | .dependencies[] | .name' | grep '{}' | sort -u"
            echo EOF
          } >> "$GITHUB_ENV"

        # Exports env vars for next steps
        # LIBS_WITH_DIFF - list of library names, separated by ';', which are outdated (ex - 'zcash_primitives;zcash_address;')
        # OUTPUT_LIBS_JSON - the json output of "cargo outdated" command. Used in
      - name: Get outdated librustzcash lib versions
        env:
          CARGO_TERM_COLOR: always
        run: |
          # TODO: Don't use cd
          cd ./uniffi-zcash-lib/lib

          # Generate cargo outdated command for all USED_LIBS
          # and put the JSON output of cargo outdated in a file for later use
          USED_LIBS=$(echo $USED_LIBS | tr ' ' ';')
          IFS=';' read -ra arr <<< "$USED_LIBS"
          cmd_args=("cargo" "outdated" "--format" "json")
          for lib_name in "${arr[@]}"; do
            cmd_args+=("-p" "$lib_name")
          done

          OUTDATED_LIBS_JSON=$("${cmd_args[@]}")

          # Construct issue labels in format - crate_name-current_version-latest_version
          ISSUE_LABELS=$(echo $OUTDATED_LIBS_JSON | jq -r 'select(.crate_name | startswith("uniffi-")).dependencies[] | select(.project != .latest) | (.name+"-"+.project+"-"+.latest)' | sort -u)
          ISSUE_LABELS=$(echo $ISSUE_LABELS | tr ' ' ';')
          echo "ISSUE_LABELS=$ISSUE_LABELS" >> $GITHUB_ENV


          LIBS_WITH_DIFF=$(echo $OUTDATED_LIBS_JSON | jq -r 'select(.crate_name | startswith("uniffi-")).dependencies[] | select(.project != .latest) | .name' | sort -u)
          LIBS_WITH_DIFF=$(echo $LIBS_WITH_DIFF | tr ' ' ';')

          echo "LIBS_WITH_DIFF=$LIBS_WITH_DIFF" >> $GITHUB_ENV

      - name: Cancel workflow on issue duplicate
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Search for a duplicate issue, based on labels.
          IFS=';' read -ra arr <<< "$ISSUE_LABELS"
          cmd_args=("gh" "issue" "list" "--repo" "ctoyan/uniffi-zcash-lib" "--json" "body") # TODO: We should either remove or replace --repo
          for label in "${arr[@]}"; do
            cmd_args+=("--label" "$label")
          done

          GET_ISSUE_OUTPUT_JSON=$("${cmd_args[@]}")

          # When an issue with the same labels is found, stop the workflow,
          # because we don't need to diff something we already have an issue for
          if [[ "$GET_ISSUE_OUTPUT_JSON" != "[]" ]]; then
            echo "FOUND_DUPLICATE_ISSUE=true" >> $GITHUB_ENV
            exit 0
          fi

          echo "FOUND_DUPLICATE_ISSUE=false" >> $GITHUB_ENV

      - name: Diff public API changes between outdated libs
        if: env.FOUND_DUPLICATE_ISSUE != 'true'
        env:
          CARGO_TERM_COLOR: always
        run: |
          IFS=';' read -ra arr <<< "$LIBS_WITH_DIFF"

          # use the cargo-public-api tool to diff the public APIs of different versions
          cargo +stable -q install cargo-public-api --locked

          for lib_name in "${arr[@]}"; do
            if [ -z "$lib_name" ]; then
              continue
            fi

            # this is faster than "cargo outdated", especially in a loop
            LIB_LATEST_VERSION=$(curl --silent "https://crates.io/api/v1/crates/$lib_name" | jq -r '.crate.max_stable_version')
            LIB_CURRENT_VERSION=$(cargo metadata --format-version=1 -q --manifest-path=./uniffi-zcash-lib/lib/Cargo.toml | jq -r --arg lib_name "$lib_name" '.packages[] | select(.name == $lib_name) | .version')

            git -C ./librustzcash fetch -q --tags
            git -C ./librustzcash checkout -q tags/$lib_name-$LIB_LATEST_VERSION # TODO: Super sketchy. This counts on the fact that they always name their releases in this format

            # write the diff to files, which we show in the next step for better readability
            cargo public-api --color=always --manifest-path=./librustzcash/Cargo.toml -p "$lib_name" -sss diff "$LIB_CURRENT_VERSION" > "${lib_name}.diff"
          done

      # Step for better diff visibility
      # If you change the name of this step, make sure it's changed in the "Create workflow summary" gh command too
      - name: Show public API diffs
        if: env.FOUND_DUPLICATE_ISSUE != 'true'
        run: |
          IFS=';' read -ra arr <<< "$LIBS_WITH_DIFF"

          for lib_name in "${arr[@]}"; do
            if [ -z "$lib_name" ]; then
              continue
            fi
            echo "${lib_name}" # TODO: Better message
            cat "${lib_name}.diff"
          done

      - name: Create workflow summary
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [[ "$FOUND_DUPLICATE_ISSUE" == "true" ]]; then
            echo "# :white_check_mark: All libraries from librustzcash are up to date :white_check_mark: " >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          IFS=';' read -ra arr <<< "$LIBS_WITH_DIFF"

          echo "# :warning: New versions of librustzcash libraries :warning: " >> $GITHUB_STEP_SUMMARY

          for lib_name in "${arr[@]}"; do
            if [ -z "$lib_name" ]; then
              continue
            fi

            LIB_LATEST_VERSION=$(curl --silent "https://crates.io/api/v1/crates/$lib_name" | jq -r '.crate.max_stable_version')
            LIB_CURRENT_VERSION=$(cargo metadata --format-version=1 -q --manifest-path=./uniffi-zcash-lib/lib/Cargo.toml | jq -r --arg lib_name "$lib_name" '.packages[] | select(.name == $lib_name) | .version')

            echo "## ${lib_name}" >> $GITHUB_STEP_SUMMARY
            echo "\`CURRENTLY USED VERSION\`    :arrow_right: ${LIB_CURRENT_VERSION}" >> $GITHUB_STEP_SUMMARY
            echo "\`LATEST PUBLISHED VERSION\`  :arrow_right: ${LIB_LATEST_VERSION}" >> $GITHUB_STEP_SUMMARY
            echo ""
          done

          workflow_url=$(gh run --repo ${{ github.repository }} view ${{ github.run_id }} --json jobs --jq '.jobs[] | select(.name == "${{ github.job }}") | .url, (.steps[] | select(.name == "Show public API diffs") | "#step:\(.number):1")' | tr -d "\n")
          echo "[VIEW DIFF]($workflow_url)" >> $GITHUB_STEP_SUMMARY

      - name: Create issue
        if: env.FOUND_DUPLICATE_ISSUE != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          workflow_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\#summary-${{ github.job }}
          IFS=';' read -ra arr <<< "$ISSUE_LABELS"
          cmd_args=("gh" "issue" "create" "--repo" "ctoyan/uniffi-zcash-lib" "--title" "New versions of librustzcash. Please review." "--body" "[Check workflow summary]($workflow_url)")
          # Loop through each library(out of $USED_LIBS) and add it as a -p argument value
          for lib_name in "${arr[@]}"; do
            cmd_args+=("--label" "$lib_name")
          done

          for cmd_arg in "${cmd_args[@]}"; do
            echo $cmd_arg
          done

          "${cmd_args[@]}"
